var tester = require("tester"),
	pd = require("pd").extendNatives(true),
	Stack = require("../src/stack.js"),
	assert = require("assert");

module.exports = {
	"test Stack": function () {
		assert(Stack);
		var i = 0;
		var s = Stack.new(function () {
			i++;
			this.next();
		}, function () {
			i++;
		});
		s.handle();
		assert(i === 2);
	},
	"test Stack.use": function () {
		var s = Stack.new();
		var i = 0;
		s.use(function () {
			i++;
			this.next();
		});
		s.use(function () {
			i++;
		});
		s.handle();
		assert(i === 2);
	},
	"test Stack.express": function () {
		var s = Stack.new();
		var i = 0;
		s.express(function (req, res, next) {
			i++;
			next("foo");
		});
		s.express(function (err, req, res, next) {
			i++;
			assert(err === "foo");
		});
		s.handle();
		assert(i === 2);
	},
	"test Stack.passErrorsTo": function () {
		var s = Stack.new();
		s.use(function () {
			this.next("foo");
		});
		s.use(s.passErrorsTo(function (a) {
			assert(a === "foo")
		}));
		s.handle();
	},
	"test Stack.storeData": function () {
		var f = function (data, cb) {
			cb(null, data*2);
		};
		var g = function (cb) {
			cb(this);	
		};
		var i = 0;
		var s = Stack.new();
		s.use(function () {
			this.storeData({
				fun: f,
				args: ["foo"], 
				key: "bar"
			});
		});
		s.use(function () {
			assert(isNaN(this.bar));
			i++;
		});
		s.handle();
		var s = Stack.new();
		s.use(function () {
			this.storeData({
				fun: g,
				args: [],
				key: "bar",
				context: "foobar",
				cb: function () {
					this.next();
				}
			});
		});
		s.use(function () {
			assert.equal(this.bar, "foobar");
			i++;
		});
		s.handle();
		assert(i === 2);
	},
	"test Stack.handle": function () {
		var arr = []
		var s = Stack.new(function (a, b, c) {
			arr[1] = a;
		}, function () {
			arr[2] = b;
		}, function () {
			arr[3] = c;
		});
		s.handle({
			data: [true, true, true],
			floor: function () {
				arr[0] = true;
			},
			ceil: function () {
				arr[4] = true;
			}
		});
		assert(arr.length === 5);
	}
};

if (!module.parent) {
	tester(module.exports);
}